//1. Змінні та типи. Розгалуження та цикли
//https://youtu.be/m5tMeqPgb0o
//______________________________________________________________________________
// if(умова){ блок if} else{дефолтний блок фолс}
// if (4 > 5) {
//   console.log('true'); //в блок if попадає тільки тру
// } else {
//   console.log('false'); // false - попадаэмо в дефолтний блок фолс, бо умова хибна
// }

//Можемо мати декілька умов, і чекаємо перше тру, подальший пошук припиняється
// if (10 < 6) {
//   console.log('10>6');
// } else if (6 < 3) {
//   console.log('6<3');
// } else if (2 < 3) {
//   console.log('2<3'); ///перше тру, пошук припиняється
// } else {
//   console.log(false);
// }

// Якщо по умові маємо одну змінну, то вона автоматично приводиться до бульового значення
// const value = 0;
// if (value) {
//   console.log('if');
// } else {
//   console.log('block defolt');
// }
//____________________________________________________________________-
//ТЕРНАРНИЙ ВИРАЗ - є тільки два випадки- або тру або фолс
//condition? variant1: variant2
// const rezult = 3 > 1 ? 'більне' : 'меньше';

//____________________________________________________________________-
//SWITCH - концепция заключается в способности сразу палать на нужній кейс
// не перебирая все по очереди. Предназначен для number i string
// const value = 129;
// switch (value) {
//   case 130:
//     console.log(1);
//     break;
//   case 129:
//     console.log('good rezult');
//     break;
//   case 3:
//     console.log(3);
//     break;
//   default:
//     console.log('false');
// }
//____________________________________________________________________
//ОЛАСТІ ВИДИМОСТІ:
//1. Глобальна - весь файл джаваскріпта
//2. Блочна( це те що замкнено в фігурних дужках {})
//---якщо ми оголосим змінну в глобальні зоні видимості та в блочній зоні щось з нею зробити
//то ми можемо вивести  в консоль в глобальні зоні результат
//---якщо оголосимо змінну в середені блочноі моделі, то в глобальні зоні видимости
// не знайдеться зміна, вона буде існувати тільки в блочній зоні
// let d = 23;
// let value = d + 20;
// if (true) {
//   value = 70;
//   const f = 35;
// }
// console.log(value); //70 так працює
// console.log(f); // f-not defined
//exemple
// let b = 25;
// if (true) {
//   let a = 15;
//   b = 44;
//   if (true) {
//     a = 25;
//     b = 31;
//   }
//   a = 44;
//   console.log(b); //31
// }
// console.log(a); // error

//exemple 2
// let w = 32;
// if (true) {
//   w = 8;
//   let d = 10;
//   if (true) {
//     w = 90;
//     d = 4;
//   }
//   w = 1;
//   console.log(d); //4
// }
// console.log(w); //1
//__________________________________________________________________-
//Цикл for
//ініціалізація лічільника let i = 0;
//умова(до яких пір буде виконуватись цей цикл) i < 5
//на скільки на кожній іткраціі буде збільшуватись лічильник i += 1

// for (let i = 0; i < 5; i += 1) {
//   console.log(i); //0,1,2,3,4
// }

// const str = 'Hello world';
// for (let i = 0; i < str.length; i += 1) {
//   console.log(str[i]);
// }
//_____________________________________________________________
//Цикл while. Рідко використовується, якщо не вказати умову, то приведе до
//того що цикл замкне (ітерація буде відбуватися до нескінченності, поки не зависне браузер)
// щоб цього не відбулося треба вказувати умову
// let str = 'Hello world';
// let i = 0;
// while (i < str.length) {
//   console.log(str[i]);
//   i += 1;
// }
// let str = 'Hello world';
// for (i = 0; i < str.length; i += 1) {
//   if (str[i] === 'w') {
//     console.log('yes');
//     break;
//   } else {
//     console.log('no');
//   }
// }
